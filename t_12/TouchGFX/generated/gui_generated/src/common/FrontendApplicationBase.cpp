/*********************************************************************************/
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#include <new>
#include <gui_generated/common/FrontendApplicationBase.hpp>
#include <gui/common/FrontendHeap.hpp>
#include <touchgfx/transitions/NoTransition.hpp>
#include <texts/TextKeysAndLanguages.hpp>
#include <touchgfx/Texts.hpp>
#include <touchgfx/hal/HAL.hpp>
#include <platform/driver/lcd/LCD16bpp.hpp>
#include <gui/login_window_screen/Login_WindowView.hpp>
#include <gui/login_window_screen/Login_WindowPresenter.hpp>
#include <gui/discret_window_screen/Discret_WindowView.hpp>
#include <gui/discret_window_screen/Discret_WindowPresenter.hpp>
#include <gui/graphics_window_screen/Graphics_WindowView.hpp>
#include <gui/graphics_window_screen/Graphics_WindowPresenter.hpp>
#include <gui/scada_window_screen/SCADA_WindowView.hpp>
#include <gui/scada_window_screen/SCADA_WindowPresenter.hpp>
#include <gui/analytics_window_screen/Analytics_WindowView.hpp>
#include <gui/analytics_window_screen/Analytics_WindowPresenter.hpp>
#include <gui/control_window_screen/Control_WindowView.hpp>
#include <gui/control_window_screen/Control_WindowPresenter.hpp>

using namespace touchgfx;

FrontendApplicationBase::FrontendApplicationBase(Model& m, FrontendHeap& heap)
    : touchgfx::MVPApplication(),
      transitionCallback(),
      frontendHeap(heap),
      model(m)
{
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_LANDSCAPE);
    touchgfx::Texts::setLanguage(GB);
    reinterpret_cast<touchgfx::LCD16bpp&>(touchgfx::HAL::lcd()).enableTextureMapperAll();
}

/*
 * Screen Transition Declarations
 */

// Login_Window

void FrontendApplicationBase::gotoLogin_WindowScreenNoTransition()
{
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoLogin_WindowScreenNoTransitionImpl);
    pendingScreenTransitionCallback = &transitionCallback;
}

void FrontendApplicationBase::gotoLogin_WindowScreenNoTransitionImpl()
{
    touchgfx::makeTransition<Login_WindowView, Login_WindowPresenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
}

// Discret_Window

void FrontendApplicationBase::gotoDiscret_WindowScreenNoTransition()
{
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoDiscret_WindowScreenNoTransitionImpl);
    pendingScreenTransitionCallback = &transitionCallback;
}

void FrontendApplicationBase::gotoDiscret_WindowScreenNoTransitionImpl()
{
    touchgfx::makeTransition<Discret_WindowView, Discret_WindowPresenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
}

// Graphics_Window

void FrontendApplicationBase::gotoGraphics_WindowScreenNoTransition()
{
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoGraphics_WindowScreenNoTransitionImpl);
    pendingScreenTransitionCallback = &transitionCallback;
}

void FrontendApplicationBase::gotoGraphics_WindowScreenNoTransitionImpl()
{
    touchgfx::makeTransition<Graphics_WindowView, Graphics_WindowPresenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
}
