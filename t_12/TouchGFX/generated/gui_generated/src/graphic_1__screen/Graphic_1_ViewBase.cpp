/*********************************************************************************/
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#include <gui_generated/graphic_1__screen/Graphic_1_ViewBase.hpp>
#include <touchgfx/Color.hpp>
#include "BitmapDatabase.hpp"
#include <texts/TextKeysAndLanguages.hpp>

Graphic_1_ViewBase::Graphic_1_ViewBase() :
    buttonCallback(this, &Graphic_1_ViewBase::buttonCallbackHandler),
    updateItemCallback(this, &Graphic_1_ViewBase::updateItemCallbackHandler)
{

    touchgfx::CanvasWidgetRenderer::setupBuffer(canvasBuffer, CANVAS_BUFFER_SIZE);

    __background.setPosition(0, 0, 480, 272);
    __background.setColor(touchgfx::Color::getColorFrom24BitRGB(0, 0, 0));

    background.setBitmap(touchgfx::Bitmap(BITMAP_COUNTER_BOX_ID));
    background.setPosition(0, 0, 480, 272);
    background.setScalingAlgorithm(touchgfx::ScalableImage::NEAREST_NEIGHBOR);

    t_AI_1.setPosition(339, 44, 65, 25);
    t_AI_1.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
    t_AI_1.setLinespacing(0);
    Unicode::snprintf(t_AI_1Buffer, T_AI_1_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID15).getText());
    t_AI_1.setWildcard(t_AI_1Buffer);
    t_AI_1.setTypedText(touchgfx::TypedText(T_SINGLEUSEID2));

    b_toGraphic_2_Screen.setXY(418, 212);
    b_toGraphic_2_Screen.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_ICON_BUTTON_ID), touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_ICON_BUTTON_PRESSED_ID), touchgfx::Bitmap(BITMAP_BLUE_ICONS_NEXT_ARROW_32_ID), touchgfx::Bitmap(BITMAP_BLUE_ICONS_NEXT_ARROW_32_ID));
    b_toGraphic_2_Screen.setIconXY(22, 15);
    b_toGraphic_2_Screen.setAction(buttonCallback);

    b_toGraphic_4_Screen.setXY(6, 213);
    b_toGraphic_4_Screen.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_ICON_BUTTON_ID), touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_ICON_BUTTON_PRESSED_ID), touchgfx::Bitmap(BITMAP_BLUE_ICONS_BACK_ARROW_32_ID), touchgfx::Bitmap(BITMAP_BLUE_ICONS_BACK_ARROW_32_ID));
    b_toGraphic_4_Screen.setIconXY(22, 15);
    b_toGraphic_4_Screen.setAction(buttonCallback);

    dg_AI_1.setScale(10);
    dg_AI_1.setXAxisScale(10);
    dg_AI_1.setXAxisOffset(0);
    dg_AI_1.setPosition(69, 73, 336, 152);
    dg_AI_1.setGraphAreaMargin(10, 35, 20, 30);
    dg_AI_1.setGraphAreaPadding(0, 5, 0, 0);
    dg_AI_1.setGraphRangeY(0, 100);

    dg_AI_1MajorXAxisGrid.setScale(10);
    dg_AI_1MajorXAxisGrid.setColor(touchgfx::Color::getColorFrom24BitRGB(224, 224, 224));
    dg_AI_1MajorXAxisGrid.setInterval(1);
    dg_AI_1MajorXAxisGrid.setLineWidth(1);
    dg_AI_1.addGraphElement(dg_AI_1MajorXAxisGrid);

    dg_AI_1MajorYAxisGrid.setScale(10);
    dg_AI_1MajorYAxisGrid.setColor(touchgfx::Color::getColorFrom24BitRGB(224, 224, 224));
    dg_AI_1MajorYAxisGrid.setInterval(10);
    dg_AI_1MajorYAxisGrid.setLineWidth(1);
    dg_AI_1.addGraphElement(dg_AI_1MajorYAxisGrid);

    dg_AI_1MajorXAxisLabel.setScale(10);
    dg_AI_1MajorXAxisLabel.setInterval(1);
    dg_AI_1MajorXAxisLabel.setLabelTypedText(touchgfx::TypedText(T_SINGLEUSEID120));
    dg_AI_1MajorXAxisLabel.setColor(touchgfx::Color::getColorFrom24BitRGB(224, 224, 224));
    dg_AI_1.addBottomElement(dg_AI_1MajorXAxisLabel);

    dg_AI_1MajorYAxisLabel.setScale(10);
    dg_AI_1MajorYAxisLabel.setInterval(10);
    dg_AI_1MajorYAxisLabel.setLabelTypedText(touchgfx::TypedText(T_SINGLEUSEID121));
    dg_AI_1MajorYAxisLabel.setLabelDecimals(1);
    dg_AI_1MajorYAxisLabel.setColor(touchgfx::Color::getColorFrom24BitRGB(224, 224, 224));
    dg_AI_1.addLeftElement(dg_AI_1MajorYAxisLabel);

    dg_AI_1Line1.setScale(10);
    dg_AI_1Line1Painter.setColor(touchgfx::Color::getColorFrom24BitRGB(212, 225, 87));
    dg_AI_1Line1.setPainter(dg_AI_1Line1Painter);
    dg_AI_1Line1.setLineWidth(3);
    dg_AI_1.addGraphElement(dg_AI_1Line1);

    b_toControlScreen.setXY(137, 225);
    b_toControlScreen.setBitmaps(touchgfx::Bitmap(BITMAP_B_CONTROL_0_ID), touchgfx::Bitmap(BITMAP_B_CONTROL_1_ID), touchgfx::Bitmap(BITMAP_EMPTY_ICON_BUTTON_0_ID), touchgfx::Bitmap(BITMAP_EMPTY_ICON_BUTTON_1_ID));
    b_toControlScreen.setIconXY(0, 0);
    b_toControlScreen.setAction(buttonCallback);

    b_toLoginScreen.setXY(66, 225);
    b_toLoginScreen.setBitmaps(touchgfx::Bitmap(BITMAP_B_LOGIN_0_ID), touchgfx::Bitmap(BITMAP_B_LOGIN_1_ID), touchgfx::Bitmap(BITMAP_EMPTY_ICON_BUTTON_0_ID), touchgfx::Bitmap(BITMAP_EMPTY_ICON_BUTTON_1_ID));
    b_toLoginScreen.setIconXY(0, 0);
    b_toLoginScreen.setAction(buttonCallback);

    b_toDiscretScreen.setXY(213, 225);
    b_toDiscretScreen.setBitmaps(touchgfx::Bitmap(BITMAP_B_DISCRET_0_ID), touchgfx::Bitmap(BITMAP_B_DISCRET_1_ID), touchgfx::Bitmap(BITMAP_EMPTY_ICON_BUTTON_0_ID), touchgfx::Bitmap(BITMAP_EMPTY_ICON_BUTTON_1_ID));
    b_toDiscretScreen.setIconXY(0, 0);
    b_toDiscretScreen.setAction(buttonCallback);

    b_toAnalyticScreen.setXY(288, 225);
    b_toAnalyticScreen.setBitmaps(touchgfx::Bitmap(BITMAP_B_ANALYTICS_0_ID), touchgfx::Bitmap(BITMAP_B_ANALYTICS_1_ID), touchgfx::Bitmap(BITMAP_EMPTY_ICON_BUTTON_0_ID), touchgfx::Bitmap(BITMAP_EMPTY_ICON_BUTTON_1_ID));
    b_toAnalyticScreen.setIconXY(0, 0);
    b_toAnalyticScreen.setAction(buttonCallback);

    b_toArchiveScreen.setXY(358, 225);
    b_toArchiveScreen.setBitmaps(touchgfx::Bitmap(BITMAP_B_ARHIVE_0_ID), touchgfx::Bitmap(BITMAP_B_ARHIVE_1_ID), touchgfx::Bitmap(BITMAP_EMPTY_ICON_BUTTON_0_ID), touchgfx::Bitmap(BITMAP_EMPTY_ICON_BUTTON_1_ID));
    b_toArchiveScreen.setIconXY(0, 0);
    b_toArchiveScreen.setAction(buttonCallback);

    si_title_AI_1.setBitmap(touchgfx::Bitmap(BITMAP_T_TITLE_AI_1_ID));
    si_title_AI_1.setPosition(141, 46, 198, 23);
    si_title_AI_1.setScalingAlgorithm(touchgfx::ScalableImage::NEAREST_NEIGHBOR);

    sw_unitsAI_1.setPosition(69, 39, 52, 35);
    sw_unitsAI_1.setHorizontal(false);
    sw_unitsAI_1.setCircular(false);
    sw_unitsAI_1.setEasingEquation(touchgfx::EasingEquations::backEaseOut);
    sw_unitsAI_1.setSwipeAcceleration(10);
    sw_unitsAI_1.setDragAcceleration(10);
    sw_unitsAI_1.setNumberOfItems(10);
    sw_unitsAI_1.setSelectedItemOffset(0);
    sw_unitsAI_1.setDrawableSize(105, 0);
    sw_unitsAI_1.setDrawables(sw_unitsAI_1ListItems, updateItemCallback);
    sw_unitsAI_1.animateToItem(0, 0);

    b_Settings.setXY(414, 8);
    b_Settings.setBitmaps(touchgfx::Bitmap(BITMAP_B_BACKGROUND_WHITE_52_35_ID), touchgfx::Bitmap(BITMAP_B_BACKGROUND_GREEN_52_35_ID), touchgfx::Bitmap(BITMAP_SETTINGS_ICON_0_ID), touchgfx::Bitmap(BITMAP_SETTINGS_ICON_1_ID));
    b_Settings.setIconXY(5, 5);

    b_DI_1.setXY(6, 59);
    b_DI_1.setBitmaps(touchgfx::Bitmap(BITMAP_DI1_0_ID), touchgfx::Bitmap(BITMAP_DI1_1_ID));

    b_DI_2.setXY(6, 98);
    b_DI_2.setBitmaps(touchgfx::Bitmap(BITMAP_DI2_0_ID), touchgfx::Bitmap(BITMAP_DI2_1_ID));

    b_DI_3.setXY(6, 138);
    b_DI_3.setBitmaps(touchgfx::Bitmap(BITMAP_DI3_0_ID), touchgfx::Bitmap(BITMAP_DI3_1_ID));

    b_DI_4.setXY(6, 178);
    b_DI_4.setBitmaps(touchgfx::Bitmap(BITMAP_DI4_0_ID), touchgfx::Bitmap(BITMAP_DI4_1_ID));

    b_DO_1.setXY(414, 59);
    b_DO_1.setBitmaps(touchgfx::Bitmap(BITMAP_DO1_0_ID), touchgfx::Bitmap(BITMAP_DO1_1_ID));

    b_DO_2.setXY(414, 98);
    b_DO_2.setBitmaps(touchgfx::Bitmap(BITMAP_DO2_0_ID), touchgfx::Bitmap(BITMAP_DO2_1_ID));

    b_DO_3.setXY(414, 138);
    b_DO_3.setBitmaps(touchgfx::Bitmap(BITMAP_DO3_0_ID), touchgfx::Bitmap(BITMAP_DO3_1_ID));

    b_DO_4.setXY(414, 178);
    b_DO_4.setBitmaps(touchgfx::Bitmap(BITMAP_DO4_0_ID), touchgfx::Bitmap(BITMAP_DO4_1_ID));

    logo.setBitmap(touchgfx::Bitmap(BITMAP_DIR4069_BRAND6_ID));
    logo.setPosition(170, 8, 141, 15);
    logo.setScalingAlgorithm(touchgfx::ScalableImage::NEAREST_NEIGHBOR);

    lb_date.setPosition(78, 1, 83, 24);
    lb_date.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
    lb_date.setLinespacing(0);
    Unicode::snprintf(lb_dateBuffer, LB_DATE_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID109).getText());
    lb_date.setWildcard(lb_dateBuffer);
    lb_date.setTypedText(touchgfx::TypedText(T_SINGLEUSEID108));

    lb_time.setPosition(8, 1, 70, 24);
    lb_time.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
    lb_time.setLinespacing(0);
    Unicode::snprintf(lb_timeBuffer, LB_TIME_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID111).getText());
    lb_time.setWildcard(lb_timeBuffer);
    lb_time.setTypedText(touchgfx::TypedText(T_SINGLEUSEID110));

    l_SP_AI_1.setPosition(101, 145, 304, 50);
    l_SP_AI_1Painter.setColor(touchgfx::Color::getColorFrom24BitRGB(14, 186, 11));
    l_SP_AI_1.setPainter(l_SP_AI_1Painter);
    l_SP_AI_1.setStart(5, 0);
    l_SP_AI_1.setEnd(350, 0);
    l_SP_AI_1.setLineWidth(4);
    l_SP_AI_1.setLineEndingStyle(touchgfx::Line::SQUARE_CAP_ENDING);

    si_SP_AIs.setBitmap(touchgfx::Bitmap(BITMAP_T_SP_AI_ID));
    si_SP_AIs.setPosition(281, 123, 67, 17);
    si_SP_AIs.setScalingAlgorithm(touchgfx::ScalableImage::NEAREST_NEIGHBOR);

    t_SP_AI_1.setPosition(358, 123, 47, 27);
    t_SP_AI_1.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
    t_SP_AI_1.setLinespacing(0);
    Unicode::snprintf(t_SP_AI_1Buffer, T_SP_AI_1_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID113).getText());
    t_SP_AI_1.setWildcard(t_SP_AI_1Buffer);
    t_SP_AI_1.setTypedText(touchgfx::TypedText(T_SINGLEUSEID112));

    rb_SD.setXY(330, 3);
    rb_SD.setBitmaps(touchgfx::Bitmap(BITMAP_RB_1_ID), touchgfx::Bitmap(BITMAP_RB_1_ID), touchgfx::Bitmap(BITMAP_RB_0_ID), touchgfx::Bitmap(BITMAP_RB_0_ID));
    rb_SD.setSelected(false);
    rb_SD.setDeselectionEnabled(false);

    rb_RS.setXY(355, 3);
    rb_RS.setBitmaps(touchgfx::Bitmap(BITMAP_RB_1_ID), touchgfx::Bitmap(BITMAP_RB_1_ID), touchgfx::Bitmap(BITMAP_RB_0_ID), touchgfx::Bitmap(BITMAP_RB_0_ID));
    rb_RS.setSelected(false);
    rb_RS.setDeselectionEnabled(false);

    rb_PRG.setXY(380, 3);
    rb_PRG.setBitmaps(touchgfx::Bitmap(BITMAP_RB_1_ID), touchgfx::Bitmap(BITMAP_RB_1_ID), touchgfx::Bitmap(BITMAP_RB_0_ID), touchgfx::Bitmap(BITMAP_RB_0_ID));
    rb_PRG.setSelected(false);
    rb_PRG.setDeselectionEnabled(false);

    lb_RS.setPosition(357, 27, 24, 16);
    lb_RS.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
    lb_RS.setLinespacing(0);
    Unicode::snprintf(lb_RSBuffer, LB_RS_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID115).getText());
    lb_RS.setWildcard(lb_RSBuffer);
    lb_RS.setTypedText(touchgfx::TypedText(T_SINGLEUSEID114));

    lb_SD.setPosition(331, 27, 24, 16);
    lb_SD.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
    lb_SD.setLinespacing(0);
    Unicode::snprintf(lb_SDBuffer, LB_SD_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID117).getText());
    lb_SD.setWildcard(lb_SDBuffer);
    lb_SD.setTypedText(touchgfx::TypedText(T_SINGLEUSEID116));

    lb_PRG.setPosition(381, 27, 26, 16);
    lb_PRG.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
    lb_PRG.setLinespacing(0);
    Unicode::snprintf(lb_PRGBuffer, LB_PRG_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID119).getText());
    lb_PRG.setWildcard(lb_PRGBuffer);
    lb_PRG.setTypedText(touchgfx::TypedText(T_SINGLEUSEID118));

    add(__background);
    add(background);
    add(t_AI_1);
    add(b_toGraphic_2_Screen);
    add(b_toGraphic_4_Screen);
    add(dg_AI_1);
    add(b_toControlScreen);
    add(b_toLoginScreen);
    add(b_toDiscretScreen);
    add(b_toAnalyticScreen);
    add(b_toArchiveScreen);
    add(si_title_AI_1);
    add(sw_unitsAI_1);
    add(b_Settings);
    add(b_DI_1);
    add(b_DI_2);
    add(b_DI_3);
    add(b_DI_4);
    add(b_DO_1);
    add(b_DO_2);
    add(b_DO_3);
    add(b_DO_4);
    add(logo);
    add(lb_date);
    add(lb_time);
    add(l_SP_AI_1);
    add(si_SP_AIs);
    add(t_SP_AI_1);
    add(rb_SD);
    add(rb_RS);
    add(rb_PRG);
    add(lb_RS);
    add(lb_SD);
    add(lb_PRG);
    radioButtonGroup1.add(rb_SD);
    radioButtonGroup1.add(rb_RS);
    radioButtonGroup1.add(rb_PRG);
}

void Graphic_1_ViewBase::setupScreen()
{
    sw_unitsAI_1.initialize();
    for (int i = 0; i < sw_unitsAI_1ListItems.getNumberOfDrawables(); i++)
    {
        sw_unitsAI_1ListItems[i].initialize();
    }
}

void Graphic_1_ViewBase::buttonCallbackHandler(const touchgfx::AbstractButton& src)
{
    if (&src == &b_toGraphic_2_Screen)
    {
        //toGraphic_2_Screen
        //When b_toGraphic_2_Screen clicked change screen to Graphic_2_
        //Go to Graphic_2_ with no screen transition
        application().gotoGraphic_2_ScreenNoTransition();
    }
    else if (&src == &b_toGraphic_4_Screen)
    {
        //toGraphic_4_Screen
        //When b_toGraphic_4_Screen clicked change screen to Graphic_4_
        //Go to Graphic_4_ with no screen transition
        application().gotoGraphic_4_ScreenNoTransition();
    }
    else if (&src == &b_toControlScreen)
    {
        //toControl
        //When b_toControlScreen clicked change screen to Control_
        //Go to Control_ with no screen transition
        application().gotoControl_ScreenNoTransition();
    }
    else if (&src == &b_toLoginScreen)
    {
        //toLogin
        //When b_toLoginScreen clicked change screen to Login_
        //Go to Login_ with no screen transition
        application().gotoLogin_ScreenNoTransition();
    }
    else if (&src == &b_toDiscretScreen)
    {
        //toDiscret
        //When b_toDiscretScreen clicked change screen to Discret_
        //Go to Discret_ with no screen transition
        application().gotoDiscret_ScreenNoTransition();
    }
    else if (&src == &b_toAnalyticScreen)
    {
        //toAnalytic
        //When b_toAnalyticScreen clicked change screen to Analytics_
        //Go to Analytics_ with no screen transition
        application().gotoAnalytics_ScreenNoTransition();
    }
    else if (&src == &b_toArchiveScreen)
    {
        //toArchive
        //When b_toArchiveScreen clicked change screen to Archive_
        //Go to Archive_ with no screen transition
        application().gotoArchive_ScreenNoTransition();
    }
}

void Graphic_1_ViewBase::updateItemCallbackHandler(touchgfx::DrawableListItemsInterface* items, int16_t containerIndex, int16_t itemIndex)
{
    if (items == &sw_unitsAI_1ListItems)
    {
        touchgfx::Drawable* d = items->getDrawable(containerIndex);
        cc_units* cc = (cc_units*)d;
        sw_unitsAI_1UpdateItem(*cc, itemIndex);
    }
}
