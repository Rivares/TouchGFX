/*********************************************************************************/
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#ifndef MAINVIEWBASE_HPP
#define MAINVIEWBASE_HPP

#include <gui/common/FrontendApplication.hpp>
#include <mvp/View.hpp>
#include <gui/main_screen/MainPresenter.hpp>
#include <touchgfx/widgets/Box.hpp>
#include <touchgfx/widgets/Image.hpp>
#include <touchgfx/widgets/TextAreaWithWildcard.hpp>
#include <touchgfx/widgets/Button.hpp>
#include <touchgfx/widgets/graph/GraphWrapAndClear.hpp>
#include <touchgfx/widgets/graph/GraphElements.hpp>
#include <touchgfx/widgets/canvas/PainterRGB565.hpp>
#include <touchgfx/widgets/graph/GraphLabels.hpp>
#include <touchgfx/containers/scrollers/ScrollList.hpp>
#include <touchgfx/widgets/RadioButton.hpp>
#include <touchgfx/widgets/ButtonWithIcon.hpp>
#include <touchgfx/widgets/RadioButtonGroup.hpp>

class MainViewBase : public touchgfx::View<MainPresenter>
{
public:
    MainViewBase();
    virtual ~MainViewBase() {}
    virtual void setupScreen();

    /*
     * Virtual Action Handlers
     */
    virtual void increaseValue()
    {
        // Override and implement this function in Main
    }

    virtual void decreaseValue()
    {
        // Override and implement this function in Main
    }

protected:
    FrontendApplication& application() {
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
    }

    /*
     * Member Declarations
     */
    touchgfx::Box __background;
    touchgfx::Box backgroundBox;
    touchgfx::Image backgroundImage;
    touchgfx::Image counterBackgroundImage;
    touchgfx::TextAreaWithOneWildcard countTxt;
    touchgfx::Button buttonUp;
    touchgfx::Button buttonDown;
    touchgfx::TextAreaWithOneWildcard loggerSPI;
    touchgfx::GraphWrapAndClear<250> dynamicGraph1;
    touchgfx::GraphElementLine dynamicGraph1Line1;
    touchgfx::PainterRGB565 dynamicGraph1Line1Painter;
    touchgfx::GraphElementGridX dynamicGraph1MajorXAxisGrid;
    touchgfx::GraphElementGridY dynamicGraph1MajorYAxisGrid;
    touchgfx::GraphLabelsX dynamicGraph1MajorXAxisLabel;
    touchgfx::GraphLabelsY dynamicGraph1MajorYAxisLabel;
    touchgfx::ScrollList scrollList1;
    touchgfx::RadioButton rb_1;
    touchgfx::RadioButton rb_2;
    touchgfx::RadioButton rb_3;
    touchgfx::RadioButton rb_4;
    touchgfx::GraphWrapAndClear<250> dynamicGraph2;
    touchgfx::GraphElementLine dynamicGraph2Line1;
    touchgfx::PainterRGB565 dynamicGraph2Line1Painter;
    touchgfx::GraphElementGridX dynamicGraph2MajorXAxisGrid;
    touchgfx::GraphElementGridY dynamicGraph2MajorYAxisGrid;
    touchgfx::GraphLabelsX dynamicGraph2MajorXAxisLabel;
    touchgfx::GraphLabelsY dynamicGraph2MajorYAxisLabel;
    touchgfx::GraphWrapAndClear<250> dynamicGraph3;
    touchgfx::GraphElementLine dynamicGraph3Line1;
    touchgfx::PainterRGB565 dynamicGraph3Line1Painter;
    touchgfx::GraphElementGridX dynamicGraph3MajorXAxisGrid;
    touchgfx::GraphElementGridY dynamicGraph3MajorYAxisGrid;
    touchgfx::GraphLabelsX dynamicGraph3MajorXAxisLabel;
    touchgfx::GraphLabelsY dynamicGraph3MajorYAxisLabel;
    touchgfx::GraphWrapAndClear<250> dynamicGraph4;
    touchgfx::GraphElementLine dynamicGraph4Line1;
    touchgfx::PainterRGB565 dynamicGraph4Line1Painter;
    touchgfx::GraphElementGridX dynamicGraph4MajorXAxisGrid;
    touchgfx::GraphElementGridY dynamicGraph4MajorYAxisGrid;
    touchgfx::GraphLabelsX dynamicGraph4MajorXAxisLabel;
    touchgfx::GraphLabelsY dynamicGraph4MajorYAxisLabel;
    touchgfx::ButtonWithIcon b_toNextScreen;
    touchgfx::ButtonWithIcon b_toPrevScreen;
    touchgfx::RadioButtonGroup<4> radioButtonGroup1;

    /*
     * Wildcard Buffers
     */
    static const uint16_t COUNTTXT_SIZE = 3;
    touchgfx::Unicode::UnicodeChar countTxtBuffer[COUNTTXT_SIZE];
    static const uint16_t LOGGERSPI_SIZE = 300;
    touchgfx::Unicode::UnicodeChar loggerSPIBuffer[LOGGERSPI_SIZE];

private:

    /*
     * Callback Declarations
     */
    touchgfx::Callback<MainViewBase, const touchgfx::AbstractButton&> buttonCallback;
    touchgfx::Callback<MainViewBase, const touchgfx::AbstractButton&> radioButtonSelectedCallback;
    touchgfx::Callback<MainViewBase, const touchgfx::AbstractButton&> radioButtonDeselectedCallback;
    touchgfx::Callback<MainViewBase, touchgfx::DrawableListItemsInterface*, int16_t, int16_t> updateItemCallback;

    /*
     * Callback Handler Declarations
     */
    void buttonCallbackHandler(const touchgfx::AbstractButton& src);
    void radioButtonSelectedCallbackHandler(const touchgfx::AbstractButton& src);
    void radioButtonDeselectedCallbackHandler(const touchgfx::AbstractButton& src);
    void updateItemCallbackHandler(touchgfx::DrawableListItemsInterface* items, int16_t containerIndex, int16_t itemIndex);

    /*
     * Canvas Buffer Size
     */
    static const uint16_t CANVAS_BUFFER_SIZE = 7200;
    uint8_t canvasBuffer[CANVAS_BUFFER_SIZE];
};

#endif // MAINVIEWBASE_HPP
