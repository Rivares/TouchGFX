/*********************************************************************************/
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#ifndef DISCRET_VIEWBASE_HPP
#define DISCRET_VIEWBASE_HPP

#include <gui/common/FrontendApplication.hpp>
#include <mvp/View.hpp>
#include <gui/discret__screen/Discret_Presenter.hpp>
#include <touchgfx/widgets/Box.hpp>
#include <touchgfx/containers/SlideMenu.hpp>
#include <touchgfx/widgets/ScalableImage.hpp>
#include <touchgfx/containers/clock/DigitalClock.hpp>
#include <touchgfx/widgets/TextAreaWithWildcard.hpp>
#include <touchgfx/widgets/ButtonWithIcon.hpp>
#include <touchgfx/containers/progress_indicators/ImageProgress.hpp>
#include <touchgfx/containers/progress_indicators/TextProgress.hpp>
#include <touchgfx/widgets/TextArea.hpp>
#include <touchgfx/containers/scrollers/ScrollWheel.hpp>
#include <gui/containers/cc_units.hpp>
#include <touchgfx/widgets/ButtonWithLabel.hpp>

class Discret_ViewBase : public touchgfx::View<Discret_Presenter>
{
public:
    Discret_ViewBase();
    virtual ~Discret_ViewBase() {}
    virtual void setupScreen();

    virtual void sw_unit_AI_1UpdateItem(cc_units& item, int16_t itemIndex)
    {
        // Override and implement this function in Discret_
    }

    virtual void sw_unit_AI_2UpdateItem(cc_units& item, int16_t itemIndex)
    {
        // Override and implement this function in Discret_
    }

    virtual void sw_unit_AI_3UpdateItem(cc_units& item, int16_t itemIndex)
    {
        // Override and implement this function in Discret_
    }

    virtual void sw_unit_AI_4UpdateItem(cc_units& item, int16_t itemIndex)
    {
        // Override and implement this function in Discret_
    }

protected:
    FrontendApplication& application() {
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
    }

    /*
     * Member Declarations
     */
    touchgfx::Box __background;
    touchgfx::SlideMenu slideMenu1;
    touchgfx::ScalableImage background;
    touchgfx::DigitalClock digitalClock;
    touchgfx::TextAreaWithOneWildcard t_AI_1;
    touchgfx::TextAreaWithOneWildcard t_AI_2;
    touchgfx::TextAreaWithOneWildcard t_AI_3;
    touchgfx::TextAreaWithOneWildcard t_AI_4;
    touchgfx::ButtonWithIcon b_Settings;
    touchgfx::ImageProgress ip_AI_1;
    touchgfx::TextProgress tp_AI_3;
    touchgfx::ImageProgress ip_AI_2;
    touchgfx::TextProgress tp_AI_4;
    touchgfx::TextArea lb_date;
    touchgfx::ScrollWheel sw_unit_AI_1;
    touchgfx::DrawableListItems<cc_units, 2> sw_unit_AI_1ListItems;
    touchgfx::ScrollWheel sw_unit_AI_2;
    touchgfx::DrawableListItems<cc_units, 2> sw_unit_AI_2ListItems;
    touchgfx::ScrollWheel sw_unit_AI_3;
    touchgfx::DrawableListItems<cc_units, 2> sw_unit_AI_3ListItems;
    touchgfx::ScrollWheel sw_unit_AI_4;
    touchgfx::DrawableListItems<cc_units, 2> sw_unit_AI_4ListItems;
    touchgfx::TextAreaWithOneWildcard loggerSPI_1;
    touchgfx::TextArea ta_logo;
    touchgfx::TextArea ta_AI_1;
    touchgfx::TextArea ta_AI_2;
    touchgfx::TextArea ta_AI_3;
    touchgfx::TextArea ta_AI_4;
    touchgfx::ButtonWithLabel b_DI_1;
    touchgfx::ButtonWithLabel b_DI_2;
    touchgfx::ButtonWithLabel b_DI_3;
    touchgfx::ButtonWithLabel b_DI_4;
    touchgfx::ButtonWithLabel b_DO_1;
    touchgfx::ButtonWithLabel b_DO_2;
    touchgfx::ButtonWithLabel b_DO_3;
    touchgfx::ButtonWithLabel b_DO_4;
    touchgfx::ButtonWithLabel b_toLoginScreen;
    touchgfx::ButtonWithLabel b_toControlScreen;
    touchgfx::ButtonWithLabel b_toGraphicScreen;
    touchgfx::ButtonWithLabel b_toAnalyticScreen;
    touchgfx::ButtonWithLabel b_toArchiveScreen;

    /*
     * Wildcard Buffers
     */
    static const uint16_t T_AI_1_SIZE = 300;
    touchgfx::Unicode::UnicodeChar t_AI_1Buffer[T_AI_1_SIZE];
    static const uint16_t T_AI_2_SIZE = 300;
    touchgfx::Unicode::UnicodeChar t_AI_2Buffer[T_AI_2_SIZE];
    static const uint16_t T_AI_3_SIZE = 300;
    touchgfx::Unicode::UnicodeChar t_AI_3Buffer[T_AI_3_SIZE];
    static const uint16_t T_AI_4_SIZE = 300;
    touchgfx::Unicode::UnicodeChar t_AI_4Buffer[T_AI_4_SIZE];
    static const uint16_t LOGGERSPI_1_SIZE = 300;
    touchgfx::Unicode::UnicodeChar loggerSPI_1Buffer[LOGGERSPI_1_SIZE];

private:

    /*
     * Callback Declarations
     */
    touchgfx::Callback<Discret_ViewBase, const touchgfx::AbstractButton&> buttonCallback;
    touchgfx::Callback<Discret_ViewBase, touchgfx::DrawableListItemsInterface*, int16_t, int16_t> updateItemCallback;

    /*
     * Callback Handler Declarations
     */
    void buttonCallbackHandler(const touchgfx::AbstractButton& src);
    void updateItemCallbackHandler(touchgfx::DrawableListItemsInterface* items, int16_t containerIndex, int16_t itemIndex);

};

#endif // DISCRET_VIEWBASE_HPP
